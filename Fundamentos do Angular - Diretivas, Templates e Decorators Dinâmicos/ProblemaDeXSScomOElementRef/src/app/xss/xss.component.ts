import { Component, ElementRef } from '@angular/core'; // Importamos as funcionalidades do Angular necess√°rias

@Component({
  selector: 'app-xss', // Define o seletor do componente, ou seja, o nome que usaremos no HTML para cham√°-lo
  imports: [], // Aqui poder√≠amos importar m√≥dulos necess√°rios, mas no momento n√£o h√° nenhum
  templateUrl: './xss.component.html', // Diz onde est√° o arquivo HTML deste componente
  styleUrl: './xss.component.scss' // Diz onde est√° o arquivo de estilos (CSS) deste componente
})
export class XssComponent { // Criamos uma classe chamada `XssComponent`, que √© o nosso componente Angular
  constructor(private _elRef: ElementRef) {} 
  // üîπ O construtor recebe uma refer√™ncia ao pr√≥prio elemento do DOM onde esse componente ser√° usado.
  // üîπ O `ElementRef` nos permite manipular diretamente elementos HTML dentro do componente.

  createElement(inputText: string){ // Criamos um m√©todo chamado `createElement`, que recebe um texto digitado pelo usu√°rio como par√¢metro

    const divEl = document.createElement('div'); 
    // üîπ Criamos um novo elemento HTML <div> dinamicamente no JavaScript.
    // üîπ Esse elemento servir√° para armazenar o texto digitado pelo usu√°rio.

    divEl.innerHTML = inputText; 
    // üîπ O texto digitado pelo usu√°rio (inputText) √© inserido dentro da <div>.
    // üî¥ Esse √© um grande problema de seguran√ßa! Se o usu√°rio digitar um c√≥digo malicioso (como um script), ele ser√° executado.

    this._elRef.nativeElement.appendChild(divEl); 
    // üîπ Adicionamos essa <div> ao elemento HTML principal do componente.
    // üîπ Isso faz com que a nova <div> apare√ßa na p√°gina.
  }
}

// Explica√ß√£o do Problema de Seguran√ßa (XSS - Cross-Site Scripting)
// No c√≥digo acima, usamos innerHTML para inserir o conte√∫do do usu√°rio dentro do HTML. 
// Isso significa que qualquer c√≥digo HTML ou JavaScript que o usu√°rio digitar ser√° interpretado pelo navegador.
// Exemplo de ataque XSS: Se o usu√°rio digitar o seguinte texto no input e clicar no bot√£o:
// <img src="teste.jpg" onerror="alert('Imagem n√£o encontrada');">
// O que acontecer√°?

// Como innerHTML interpreta o c√≥digo HTML, ele criar√° uma imagem invis√≠vel (<img src="teste.jpg">).
// Como o caminho "teste.jpg" n√£o existe, o navegador acionar√° o evento onerror, 
// que executar√° alert('Imagem n√£o encontrada');.
// Isso significa que um usu√°rio mal-intencionado pode inserir qualquer c√≥digo JavaScript e 
// fazer coisas perigosas, como roubar cookies ou redirecionar usu√°rios para sites falsos.

// Solu√ß√£o para Evitar XSS

// Podemos usar o Renderer2 do Angular para inserir apenas texto puro, sem interpretar c√≥digo HTML.

// constructor(private _elRef: ElementRef, private _renderer: Renderer2) {} 
//   // üîπ Agora, adicionamos o `Renderer2`, que √© uma ferramenta do Angular para manipular o DOM de forma segura.

//   createElement(inputText: string){
//     const divEl = this._renderer.createElement('div'); 
//     // üîπ Criamos um novo elemento <div> de forma segura usando o Renderer2.

//     const textNode = this._renderer.createText(inputText);
//     // üîπ Criamos um n√≥ de texto puro (sem HTML), impedindo que c√≥digo malicioso seja executado.

//     this._renderer.appendChild(divEl, textNode);
//     // üîπ Adicionamos o texto √† <div>.

//     this._renderer.appendChild(this._elRef.nativeElement, divEl);
//     // üîπ Finalmente, adicionamos essa <div> √† p√°gina.
//   }

// Por que essa solu√ß√£o funciona?
// O Renderer2 impede que qualquer c√≥digo HTML seja interpretado.
// Se o usu√°rio digitar <script>alert("XSS")</script>, ele ser√° tratado apenas como texto e n√£o ser√° executado.

// Resumo
// ‚ùå C√≥digo inseguro (innerHTML) ‚Üí Permite execu√ß√£o de scripts e ataques XSS.
// ‚úÖ C√≥digo seguro (Renderer2) ‚Üí Apenas adiciona texto puro, sem interpreta√ß√£o de c√≥digo.
