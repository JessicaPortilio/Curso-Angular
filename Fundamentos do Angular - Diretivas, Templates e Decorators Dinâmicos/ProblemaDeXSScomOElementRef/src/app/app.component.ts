import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { FocusSecondInputDirective } from './directivers/focus-second-input.directive';
import { TesteService } from './services/teste.service';
import { XssComponent } from "./xss/xss.component";

// ðŸ”¹ Importamos os mÃ³dulos necessÃ¡rios:
// - `Component` â†’ Define um componente Angular.
// - `OnInit` â†’ Ciclo de vida que roda quando o componente Ã© inicializado.
// - `AfterViewInit` â†’ Ciclo de vida que roda depois que a visualizaÃ§Ã£o do componente foi carregada.
// - `ElementRef` â†’ Permite acessar diretamente elementos do DOM no Angular.
// - `ViewChild` â†’ Permite capturar referÃªncias a elementos do HTML dentro do TypeScript.

@Component({
  selector: 'app-root', // ðŸ”¹ Define o seletor usado para referenciar esse componente no HTML.
  imports: [FocusSecondInputDirective, XssComponent], // ðŸ”¹ Importamos a diretiva personalizada `FocusSecondInputDirective` para uso no HTML.
  templateUrl: './app.component.html', // ðŸ”¹ Define o arquivo HTML do componente.
  styleUrl: './app.component.scss' // ðŸ”¹ Define o arquivo de estilos do componente.
})
export class AppComponent {
  constructor(
    private readonly _elRef: ElementRef, // ðŸ”¹ `ElementRef` permite acessar diretamente o elemento raiz do componente.
    private readonly _testeService: TesteService // ðŸ”¹ Injetamos o serviÃ§o `TesteService` para criar elementos dinamicamente.
  ) {}

  // ðŸ”¹ MÃ©todo chamado quando o botÃ£o for clicado.
  createElement() {
    this._testeService.create(this._elRef); // ðŸ”¹ Chama o mÃ©todo `create()` do serviÃ§o e passa o elemento do componente.
  }
}

